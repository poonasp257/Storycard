{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JunYoung\\\\Desktop\\\\GitHub\\\\storycard\\\\client\\\\src\\\\App\\\\components\\\\Draggable.js\";\nimport React, { Component } from 'react';\n\nfunction usesLeftButton(e) {\n  const button = e.buttons || e.which || e.button;\n  return button === 1;\n}\n\nclass Draggable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addListeners = element => {\n      element.addEventListener('mousedown', e => {\n        this.handleMouseDown(e);\n      }, false);\n    };\n\n    this.handleMouseDown = e => {\n      if (usesLeftButton(e)) {\n        document.addEventListener('mousemove', this.handleMouseMove);\n        document.addEventListener('mouseup', this.handleMouseUp);\n        this.startDrag(e.clientX, e.clientY);\n        this.containerElem.style.cursor = 'grabbing';\n      }\n    };\n\n    this.startDrag = (clientX, clientY) => {\n      const rect = this.containerElem.getBoundingClientRect();\n      this.setState({\n        leftOffset: rect.left - clientX,\n        topOffset: rect.top - clientY,\n        left: rect.left,\n        top: rect.top\n      });\n    };\n\n    this.handleMouseMove = e => {\n      if (!this.props.noDragging) {\n        e.preventDefault();\n\n        if (this.state.clicked) {\n          this.drag(e.clientX, e.clientY);\n          window.getSelection().removeAllRanges(); // prevent firefox native-drag issue when image is highlighted\n        }\n      }\n    };\n\n    this.getOffscreenCoordinates = (x, y) => {\n      // are we offscreen (or very close, anyway)? if so by how much?\n      const LEFTEDGE = 10;\n      const RIGHTEDGE = window.innerWidth - 10;\n      const TOPEDGE = 10;\n      const BOTTOMEDGE = window.innerHeight - 10;\n      const xOff = x < LEFTEDGE ? x - LEFTEDGE : x > RIGHTEDGE ? x - RIGHTEDGE : 0;\n      const yOff = y < TOPEDGE ? y - TOPEDGE : y > BOTTOMEDGE ? y - BOTTOMEDGE : 0;\n      return yOff || xOff ? [xOff, yOff] : false;\n    };\n\n    this.drag = (x, y) => {\n      //this.generateEnterLeaveEvents(x, y);\n      const stateChanges = {\n        dragging: true\n      };\n      const offScreen = this.getOffscreenCoordinates(x, y);\n\n      if (offScreen) {\n        this.startScrolling(...offScreen);\n      } else {\n        this.stopScrolling();\n\n        if (!this.props.yOnly) {\n          stateChanges.left = this.state.leftOffset + x - this.fixedOffsetLeft;\n        }\n\n        if (!this.props.xOnly) {\n          stateChanges.top = this.state.topOffset + y - this.fixedOffsetTop;\n        }\n      }\n\n      this.setState(stateChanges);\n      this.props.onDrag(this.props.dragData, this.currentTarget, x, y);\n    };\n\n    this.handleMouseUp = e => {\n      document.removeEventListener('mousemove', this.handleMouseMove);\n      document.removeEventListener('mouseup', this.handleMouseUp);\n      this.drop(e.clientX, e.clientY);\n    };\n\n    this.drop = (clientX, clientY) => {\n      this.containerElem.style.cursor = 'default';\n    };\n\n    this.state = {\n      leftOffset: 0,\n      topOffset: 0,\n      left: 0,\n      top: 0,\n      clicked: false,\n      dragging: false\n    };\n    this.containerElem = null;\n  }\n\n  componentDidMount() {\n    const imgs = this.containerElem.getElementsByTagName('IMG');\n\n    for (let i = 0; i < imgs.length; ++i) {\n      imgs[i].setAttribute('draggable', 'false');\n    }\n\n    this.addListeners(this.containerElem);\n    this.containerElem.style.cursor = 'grab';\n  }\n\n  render() {\n    const content = this.props.children;\n    return React.createElement(\"div\", {\n      ref: c => {\n        this.containerElem = c;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nDraggable.defaultProps = {\n  children: null,\n  onDragStart: () => {},\n  onDrag: () => {},\n  onDragEnd: () => {},\n  onDrop: () => {},\n  noDragging: false,\n  render: null\n};\nexport default Draggable;","map":{"version":3,"sources":["C:\\Users\\JunYoung\\Desktop\\GitHub\\storycard\\client\\src\\App\\components\\Draggable.js"],"names":["React","Component","usesLeftButton","e","button","buttons","which","Draggable","constructor","props","addListeners","element","addEventListener","handleMouseDown","document","handleMouseMove","handleMouseUp","startDrag","clientX","clientY","containerElem","style","cursor","rect","getBoundingClientRect","setState","leftOffset","left","topOffset","top","noDragging","preventDefault","state","clicked","drag","window","getSelection","removeAllRanges","getOffscreenCoordinates","x","y","LEFTEDGE","RIGHTEDGE","innerWidth","TOPEDGE","BOTTOMEDGE","innerHeight","xOff","yOff","stateChanges","dragging","offScreen","startScrolling","stopScrolling","yOnly","fixedOffsetLeft","xOnly","fixedOffsetTop","onDrag","dragData","currentTarget","removeEventListener","drop","componentDidMount","imgs","getElementsByTagName","i","length","setAttribute","render","content","children","c","defaultProps","onDragStart","onDragEnd","onDrop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nfunction usesLeftButton(e) {\r\n    const button = e.buttons || e.which || e.button;\r\n    return button === 1;\r\n}\r\n\r\nclass Draggable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            leftOffset: 0,\r\n            topOffset: 0,\r\n            left: 0,\r\n            top: 0,\r\n            clicked: false,\r\n            dragging: false,\r\n        }\r\n        \r\n        this.containerElem = null;\r\n    }    \r\n\r\n    componentDidMount() {\r\n        const imgs = this.containerElem.getElementsByTagName('IMG');\r\n        for (let i = 0; i < imgs.length; ++i) {\r\n          imgs[i].setAttribute('draggable', 'false');\r\n        }\r\n\r\n        this.addListeners(this.containerElem);\r\n        this.containerElem.style.cursor = 'grab';\r\n    }\r\n\r\n    addListeners = (element) => {\r\n        element.addEventListener('mousedown', (e) => { this.handleMouseDown(e); }, false);\r\n    };\r\n\r\n    handleMouseDown = (e) => {\r\n        if(usesLeftButton(e))\r\n        {\r\n            document.addEventListener('mousemove', this.handleMouseMove);\r\n            document.addEventListener('mouseup', this.handleMouseUp);\r\n            this.startDrag(e.clientX, e.clientY);\r\n            this.containerElem.style.cursor = 'grabbing';\r\n        }\r\n    }\r\n\r\n    startDrag = (clientX, clientY) => {\r\n        const rect = this.containerElem.getBoundingClientRect();\r\n        this.setState({\r\n            leftOffset: rect.left - clientX,\r\n            topOffset: rect.top - clientY,\r\n            left: rect.left,\r\n            top: rect.top,\r\n        });\r\n    } \r\n\r\n    handleMouseMove = (e) => {\r\n        if (!this.props.noDragging) {\r\n            e.preventDefault();\r\n            if (this.state.clicked) {\r\n              this.drag(e.clientX, e.clientY);\r\n              window.getSelection().removeAllRanges(); // prevent firefox native-drag issue when image is highlighted\r\n            }\r\n          }\r\n    }\r\n\r\n    getOffscreenCoordinates = (x, y) => {\r\n        // are we offscreen (or very close, anyway)? if so by how much?\r\n        const LEFTEDGE = 10\r\n        const RIGHTEDGE = window.innerWidth - 10\r\n        const TOPEDGE = 10\r\n        const BOTTOMEDGE = window.innerHeight - 10\r\n        const xOff = x < LEFTEDGE ? x - LEFTEDGE : x > RIGHTEDGE ? x - RIGHTEDGE : 0;\r\n        const yOff = y < TOPEDGE ? y - TOPEDGE : y > BOTTOMEDGE? y - BOTTOMEDGE : 0;\r\n        return yOff || xOff ? [xOff, yOff] : false;\r\n    };\r\n\r\n    drag = (x, y) => {\r\n        //this.generateEnterLeaveEvents(x, y);\r\n        const stateChanges = { dragging: true };\r\n        const offScreen = this.getOffscreenCoordinates(x, y);\r\n        if (offScreen) {\r\n          this.startScrolling(...offScreen)\r\n        } else {\r\n          this.stopScrolling();\r\n          if (!this.props.yOnly) { stateChanges.left = (this.state.leftOffset + x) - this.fixedOffsetLeft; }\r\n          if (!this.props.xOnly) { stateChanges.top = (this.state.topOffset + y) - this.fixedOffsetTop; }\r\n        }\r\n        this.setState(stateChanges);\r\n        this.props.onDrag(this.props.dragData, this.currentTarget, x, y);\r\n    };\r\n\r\n    handleMouseUp = (e) => {\r\n        document.removeEventListener('mousemove', this.handleMouseMove);\r\n        document.removeEventListener('mouseup', this.handleMouseUp);\r\n        this.drop(e.clientX, e.clientY);\r\n    }\r\n\r\n    drop = (clientX, clientY) => {\r\n        this.containerElem.style.cursor = 'default';\r\n    }\r\n\r\n    render() {\r\n        const content = this.props.children;\r\n\r\n        return (\r\n            <div ref={(c) => {this.containerElem = c;}}>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDraggable.defaultProps = {\r\n    children: null,\r\n    onDragStart: () => {},\r\n    onDrag: () => {},\r\n    onDragEnd: () => {},\r\n    onDrop: () => {},\r\n    noDragging: false,\r\n    render: null,\r\n  };\r\n\r\nexport default Draggable;"]},"metadata":{},"sourceType":"module"}