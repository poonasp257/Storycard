{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\JunYoung\\\\Desktop\\\\GitHub\\\\storycard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\JunYoung\\\\Desktop\\\\GitHub\\\\storycard\\\\client\\\\src\\\\App\\\\components\\\\DragDropContainer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction usesLeftButton(e) {\n  const button = e.buttons || e.which || e.button;\n  return button === 1;\n}\n\nfunction getFixedOffset() {\n  // When browser window is zoomed, IOS browsers will offset \"location:fixed\" component coordinates\n  // from the actual window coordinates\n  let fixedElem = document.createElement('div');\n  fixedElem.style.cssText = 'position:fixed; top: 0; left: 0';\n  document.body.appendChild(fixedElem);\n  const rect = fixedElem.getBoundingClientRect();\n  document.body.removeChild(fixedElem);\n  return [rect.left, rect.top];\n}\n\nfunction isZoomed() {\n  // somewhat arbitrary figure to decide whether we need to use getFixedOffset (above) or not\n  return Math.abs(1 - document.body.clientWidth / window.innerWidth) > 0.02;\n}\n\nclass DragDropContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addListeners = elem => {\n      elem.addEventListener('mousedown', e => {\n        this.handleMouseDown(e);\n      }, false);\n      elem.addEventListener('touchstart', e => {\n        this.handleTouchStart(e);\n      }, false); // must add touchmove listener here in order for preventDefault() to work, to prevent scrolling during drag..\n\n      elem.addEventListener('touchmove', this.handleTouchMove, {\n        passive: false\n      });\n      elem.addEventListener('touchend', this.handleTouchEnd);\n    };\n\n    this.buildCustomEvent = (eventName, extraData = {}) => {\n      let e;\n\n      if (typeof window.CustomEvent !== 'function') {\n        // we are in IE 11 and must use old-style method of creating event\n        e = document.createEvent('CustomEvent');\n        e.initCustomEvent(eventName, true, true, {});\n      } else {\n        e = new CustomEvent(eventName, {\n          bubbles: true,\n          cancelable: true\n        });\n      } // Add useful data to the event\n\n\n      Object.assign(e, {\n        dragData: this.props.dragData,\n        dragElem: this.dragElem,\n        containerElem: this.containerElem,\n        sourceElem: this.sourceElem\n      }, extraData);\n      return e;\n    };\n\n    this.setCurrentTarget = (x, y) => {\n      // drop the z-index to get this elem out of the way, figure out what we're dragging over, then reset the z index\n      this.dragElem.style.zIndex = -1;\n      const target = document.elementFromPoint(x, y) || document.body;\n      this.dragElem.style.zIndex = this.props.zIndex; // prevent it from selecting itself as the target\n\n      this.currentTarget = this.dragElem.contains(target) ? document.body : target;\n    };\n\n    this.setFixedOffset = () => {\n      if (isZoomed()) {\n        var _getFixedOffset = getFixedOffset();\n\n        var _getFixedOffset2 = _slicedToArray(_getFixedOffset, 2);\n\n        this.fixedOffsetLeft = _getFixedOffset2[0];\n        this.fixedOffsetTop = _getFixedOffset2[1];\n      }\n    };\n\n    this.doScroll = () => {\n      window.scrollBy(this.xScroll, this.yScroll);\n      this.setFixedOffset();\n    };\n\n    this.startScrolling = (x, y) => {\n      var _ref = [x, y];\n      this.xScroll = _ref[0];\n      this.yScroll = _ref[1];\n\n      if (!this.scrollTimer) {\n        this.scrollTimer = setInterval(this.doScroll, 50);\n      }\n    };\n\n    this.stopScrolling = () => {\n      clearInterval(this.scrollTimer);\n      this.scrollTimer = null;\n    };\n\n    this.generateEnterLeaveEvents = (x, y) => {\n      // generate events as we enter and leave elements while dragging\n      const prefix = this.props.targetKey;\n      this.setCurrentTarget(x, y);\n\n      if (this.currentTarget !== this.prevTarget) {\n        if (this.prevTarget) {\n          this.prevTarget.dispatchEvent(this.buildCustomEvent(\"\".concat(prefix, \"DragLeave\")));\n        }\n\n        if (this.currentTarget) {\n          this.currentTarget.dispatchEvent(this.buildCustomEvent(\"\".concat(prefix, \"DragEnter\")));\n        }\n      }\n\n      this.prevTarget = this.currentTarget;\n    };\n\n    this.generateDropEvent = (x, y) => {\n      // generate a drop event in whatever we're currently dragging over\n      this.setCurrentTarget(x, y);\n      const customEvent = this.buildCustomEvent(\"\".concat(this.props.targetKey, \"Drop\"), {\n        x,\n        y\n      });\n      this.currentTarget.dispatchEvent(customEvent);\n    };\n\n    this.handleMouseDown = e => {\n      if (usesLeftButton(e) && !this.props.noDragging) {\n        document.addEventListener('mousemove', this.handleMouseMove);\n        document.addEventListener('mouseup', this.handleMouseUp);\n        this.startDrag(e.clientX, e.clientY);\n      }\n    };\n\n    this.handleTouchStart = e => {\n      if (!this.props.noDragging) {\n        e.stopPropagation();\n        this.setFixedOffset();\n        this.startDrag(e.targetTouches[0].clientX, e.targetTouches[0].clientY);\n      }\n    };\n\n    this.startDrag = (clickX, clickY) => {\n      document.addEventListener(\"\".concat(this.props.targetKey, \"Dropped\"), this.props.onDrop);\n      const rect = this.containerElem.getBoundingClientRect();\n      this.setState({\n        clicked: true,\n        leftOffset: rect.left - clickX,\n        topOffset: rect.top - clickY,\n        left: rect.left,\n        top: rect.top\n      });\n      this.props.onDragStart(this.props.dragData);\n    };\n\n    this.handleMouseMove = e => {\n      if (!this.props.noDragging) {\n        e.preventDefault();\n\n        if (this.state.clicked) {\n          this.drag(e.clientX, e.clientY);\n          window.getSelection().removeAllRanges(); // prevent firefox native-drag issue when image is highlighted\n        }\n      }\n    };\n\n    this.handleTouchMove = e => {\n      if (!this.props.noDragging) {\n        e.preventDefault(); // prevents window scrolling\n\n        if (this.state.clicked) {\n          this.drag(e.targetTouches[0].clientX, e.targetTouches[0].clientY);\n        }\n      }\n    };\n\n    this.getOffscreenCoordinates = (x, y) => {\n      // are we offscreen (or very close, anyway)? if so by how much?\n      const LEFTEDGE = 10;\n      const RIGHTEDGE = window.innerWidth - 10;\n      const TOPEDGE = 10;\n      const BOTTOMEDGE = window.innerHeight - 10;\n      const xOff = x < LEFTEDGE ? x - LEFTEDGE : x > RIGHTEDGE ? x - RIGHTEDGE : 0;\n      const yOff = y < TOPEDGE ? y - TOPEDGE : y > BOTTOMEDGE ? y - BOTTOMEDGE : 0;\n      return yOff || xOff ? [xOff, yOff] : false;\n    };\n\n    this.drag = (x, y) => {\n      this.generateEnterLeaveEvents(x, y);\n      const stateChanges = {\n        dragging: true\n      };\n      const offScreen = this.getOffscreenCoordinates(x, y);\n\n      if (offScreen) {\n        this.startScrolling(...offScreen);\n      } else {\n        this.stopScrolling();\n\n        if (!this.props.yOnly) {\n          stateChanges.left = this.state.leftOffset + x - this.fixedOffsetLeft;\n        }\n\n        if (!this.props.xOnly) {\n          stateChanges.top = this.state.topOffset + y - this.fixedOffsetTop;\n        }\n      }\n\n      this.setState(stateChanges);\n      this.props.onDrag(this.props.dragData, this.currentTarget, x, y);\n    };\n\n    this.handleMouseUp = e => {\n      this.setState({\n        clicked: false\n      });\n\n      if (this.state.dragging) {\n        document.removeEventListener('mousemove', this.handleMouseMove);\n        document.removeEventListener('mouseup', this.handleMouseUp);\n        this.drop(e.clientX, e.clientY);\n        window.getSelection().removeAllRanges(); // prevent weird-looking highlights\n      }\n    };\n\n    this.handleTouchEnd = e => {\n      this.setState({\n        clicked: false\n      });\n\n      if (this.state.dragging) {\n        this.drop(e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n      }\n    };\n\n    this.drop = (x, y) => {\n      this.stopScrolling();\n      this.generateDropEvent(x, y);\n      document.removeEventListener(\"\".concat(this.props.targetKey, \"Dropped\"), this.props.onDrop);\n      this._isMounted && this.setState({\n        dragging: false\n      });\n      this.props.onDragEnd(this.props.dragData, this.currentTarget, x, y);\n    };\n\n    this.getDisplayMode = () => {\n      if (this.state.dragging && !this.props.dragClone && !this.props.customDragElement) {\n        if (this.props.disappearDraggedElement) {\n          return 'disappeared';\n        }\n\n        return 'hidden';\n      }\n\n      return 'normal';\n    };\n\n    this.state = {\n      leftOffset: 0,\n      topOffset: 0,\n      left: 0,\n      top: 0,\n      clicked: false,\n      dragging: false\n    }; // The DOM elem we're dragging, and the elements we're dragging over.\n\n    this.dragElem = null;\n    this.containerElem = null;\n    this.sourceElem = null;\n    this.currentTarget = null;\n    this.prevTarget = null;\n    this._isMounted = true; // offset factors that occur when dragging in a zoomed-in IOS browser\n\n    this.fixedOffsetLeft = 0;\n    this.fixedOffsetTop = 0; // scrolling at edge of window\n\n    this.scrollTimer = null;\n    this.xScroll = 0;\n    this.yScroll = 0;\n  }\n\n  componentDidMount() {\n    // set draggable attribute 'false' on any images, to prevent conflicts w browser native dragging\n    const imgs = this.containerElem.getElementsByTagName('IMG');\n\n    for (let i = 0; i < imgs.length; i += 1) {\n      imgs[i].setAttribute('draggable', 'false');\n    } // capture events\n\n\n    if (this.props.dragHandleClassName) {\n      // if drag handles\n      const elems = this.containerElem.getElementsByClassName(this.props.dragHandleClassName);\n\n      for (let i = 0; i < elems.length; i += 1) {\n        this.addListeners(elems[i]);\n        elems[i].style.cursor = 'move';\n      }\n    } else {\n      // ... or not\n      this.addListeners(this.containerElem);\n      this.containerElem.style.cursor = 'move';\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const content = this.props.render ? this.props.render(this.state) : this.props.children;\n    const displayMode = this.getDisplayMode(); // dragging will be applied to the \"ghost\" element\n\n    let ghostContent;\n\n    if (this.props.customDragElement) {\n      ghostContent = this.props.customDragElement;\n    } else {\n      ghostContent = content; // dragging a clone\n    }\n\n    const ghostStyles = {\n      position: 'fixed',\n      cursor: 'move',\n      left: this.state.left,\n      top: this.state.top,\n      zIndex: this.props.zIndex,\n      opacity: this.props.dragElemOpacity,\n      display: this.state.dragging ? 'block' : 'none'\n    };\n    const ghost = React.createElement(\"div\", {\n      className: \"ddcontainerghost\",\n      style: ghostStyles,\n      ref: c => {\n        this.dragElem = c;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, ghostContent);\n    const containerStyles = {\n      position: displayMode === 'disappeared' ? 'absolute' : 'relative',\n      display: 'inline-block'\n    };\n    const sourceElemStyles = {\n      display: displayMode === 'disappeared' ? 'none' : 'inherit',\n      visibility: displayMode === 'hidden' ? 'hidden' : 'inherit'\n    };\n    return React.createElement(\"div\", {\n      className: \"ddcontainer\",\n      style: containerStyles,\n      ref: c => {\n        this.containerElem = c;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"ddcontainersource\",\n      style: sourceElemStyles,\n      ref: c => {\n        this.sourceElem = c;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, content), ghost);\n  }\n\n}\n\nDragDropContainer.propTypes = {\n  children: PropTypes.node,\n  // Determines what you can drop on\n  targetKey: PropTypes.string,\n  // If provided, we'll drag this instead of the actual object. Takes priority over dragClone if both are set\n  customDragElement: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  // Makes the dragged element completely disappear while dragging so that it takes up no space\n  disappearDraggedElement: PropTypes.bool,\n  // If true, then we will drag a clone of the object instead of the object itself. See also customDragElement\n  dragClone: PropTypes.bool,\n  // ghost will display with this opacity\n  dragElemOpacity: PropTypes.number,\n  // We will pass this data to the target when you drag or drop over it\n  dragData: PropTypes.object,\n  // If included, we'll only let you drag by grabbing elements with this className\n  dragHandleClassName: PropTypes.string,\n  // if True, then dragging is turned off\n  noDragging: PropTypes.bool,\n  // callbacks (optional):\n  onDrop: PropTypes.func,\n  onDrag: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDragStart: PropTypes.func,\n  // Enable a render prop\n  render: PropTypes.func,\n  // Constrain dragging to the x or y directions only\n  xOnly: PropTypes.bool,\n  yOnly: PropTypes.bool,\n  // Defaults to 1000 while dragging, but you can customize it if you need it to go higher\n  zIndex: PropTypes.number\n};\nDragDropContainer.defaultProps = {\n  targetKey: 'ddc',\n  children: null,\n  customDragElement: null,\n  disappearDraggedElement: false,\n  dragClone: false,\n  dragElemOpacity: 0.9,\n  dragData: {},\n  dragHandleClassName: '',\n  onDragStart: () => {},\n  onDrag: () => {},\n  onDragEnd: () => {},\n  onDrop: () => {},\n  noDragging: false,\n  render: null,\n  xOnly: false,\n  yOnly: false,\n  zIndex: 1000\n};\nexport default DragDropContainer;","map":{"version":3,"sources":["C:\\Users\\JunYoung\\Desktop\\GitHub\\storycard\\client\\src\\App\\components\\DragDropContainer.js"],"names":["React","PropTypes","usesLeftButton","e","button","buttons","which","getFixedOffset","fixedElem","document","createElement","style","cssText","body","appendChild","rect","getBoundingClientRect","removeChild","left","top","isZoomed","Math","abs","clientWidth","window","innerWidth","DragDropContainer","Component","constructor","props","addListeners","elem","addEventListener","handleMouseDown","handleTouchStart","handleTouchMove","passive","handleTouchEnd","buildCustomEvent","eventName","extraData","CustomEvent","createEvent","initCustomEvent","bubbles","cancelable","Object","assign","dragData","dragElem","containerElem","sourceElem","setCurrentTarget","x","y","zIndex","target","elementFromPoint","currentTarget","contains","setFixedOffset","fixedOffsetLeft","fixedOffsetTop","doScroll","scrollBy","xScroll","yScroll","startScrolling","scrollTimer","setInterval","stopScrolling","clearInterval","generateEnterLeaveEvents","prefix","targetKey","prevTarget","dispatchEvent","generateDropEvent","customEvent","noDragging","handleMouseMove","handleMouseUp","startDrag","clientX","clientY","stopPropagation","targetTouches","clickX","clickY","onDrop","setState","clicked","leftOffset","topOffset","onDragStart","preventDefault","state","drag","getSelection","removeAllRanges","getOffscreenCoordinates","LEFTEDGE","RIGHTEDGE","TOPEDGE","BOTTOMEDGE","innerHeight","xOff","yOff","stateChanges","dragging","offScreen","yOnly","xOnly","onDrag","removeEventListener","drop","changedTouches","_isMounted","onDragEnd","getDisplayMode","dragClone","customDragElement","disappearDraggedElement","componentDidMount","imgs","getElementsByTagName","i","length","setAttribute","dragHandleClassName","elems","getElementsByClassName","cursor","componentWillUnmount","render","content","children","displayMode","ghostContent","ghostStyles","position","opacity","dragElemOpacity","display","ghost","c","containerStyles","sourceElemStyles","visibility","propTypes","node","string","oneOfType","bool","number","object","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction usesLeftButton(e) {\r\n    const button = e.buttons || e.which || e.button;\r\n    return button === 1;\r\n}\r\n\r\nfunction getFixedOffset() {\r\n    // When browser window is zoomed, IOS browsers will offset \"location:fixed\" component coordinates\r\n    // from the actual window coordinates\r\n    let fixedElem = document.createElement('div');\r\n    fixedElem.style.cssText = 'position:fixed; top: 0; left: 0';\r\n    document.body.appendChild(fixedElem);\r\n    const rect = fixedElem.getBoundingClientRect();\r\n    document.body.removeChild(fixedElem);\r\n    return [rect.left, rect.top]\r\n}\r\n\r\nfunction isZoomed() {\r\n    // somewhat arbitrary figure to decide whether we need to use getFixedOffset (above) or not\r\n    return Math.abs(1 - (document.body.clientWidth / window.innerWidth)) > 0.02;\r\n}\r\n\r\nclass DragDropContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            leftOffset: 0,\r\n            topOffset: 0,\r\n            left: 0,\r\n            top: 0,\r\n            clicked: false,\r\n            dragging: false,\r\n        };\r\n\r\n        // The DOM elem we're dragging, and the elements we're dragging over.\r\n        this.dragElem = null;\r\n        this.containerElem = null;\r\n        this.sourceElem = null;\r\n        this.currentTarget = null;\r\n        this.prevTarget = null;\r\n\r\n        this._isMounted = true;\r\n\r\n        // offset factors that occur when dragging in a zoomed-in IOS browser\r\n        this.fixedOffsetLeft = 0;\r\n        this.fixedOffsetTop = 0;\r\n\r\n        // scrolling at edge of window\r\n        this.scrollTimer = null;\r\n        this.xScroll = 0;\r\n        this.yScroll = 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        // set draggable attribute 'false' on any images, to prevent conflicts w browser native dragging\r\n        const imgs = this.containerElem.getElementsByTagName('IMG');\r\n        for (let i = 0; i < imgs.length; i += 1) {\r\n            imgs[i].setAttribute('draggable', 'false');\r\n        }\r\n\r\n        // capture events\r\n        if (this.props.dragHandleClassName) {\r\n            // if drag handles\r\n            const elems = this.containerElem.getElementsByClassName(this.props.dragHandleClassName);\r\n            for (let i = 0; i < elems.length; i += 1) {\r\n                this.addListeners(elems[i]);\r\n                elems[i].style.cursor = 'move';\r\n            }\r\n        } else {\r\n            // ... or not\r\n            this.addListeners(this.containerElem);\r\n            this.containerElem.style.cursor = 'move';\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    addListeners = (elem) => {\r\n        elem.addEventListener('mousedown', (e) => { this.handleMouseDown(e); }, false);\r\n        elem.addEventListener('touchstart', (e) => { this.handleTouchStart(e); }, false);\r\n        // must add touchmove listener here in order for preventDefault() to work, to prevent scrolling during drag..\r\n        elem.addEventListener('touchmove', this.handleTouchMove, { passive: false });\r\n        elem.addEventListener('touchend', this.handleTouchEnd);\r\n    };\r\n\r\n    buildCustomEvent = (eventName, extraData = {}) => {\r\n        let e;\r\n        if (typeof window.CustomEvent !== 'function') {\r\n            // we are in IE 11 and must use old-style method of creating event\r\n            e = document.createEvent('CustomEvent');\r\n            e.initCustomEvent(eventName, true, true, {});\r\n        } else {\r\n            e = new CustomEvent(eventName, { bubbles: true, cancelable: true });\r\n        }\r\n        // Add useful data to the event\r\n        Object.assign(e, {\r\n            dragData: this.props.dragData,\r\n            dragElem: this.dragElem,\r\n            containerElem: this.containerElem,\r\n            sourceElem: this.sourceElem,\r\n        }, extraData);\r\n        return e;\r\n    };\r\n\r\n    setCurrentTarget = (x, y) => {\r\n        // drop the z-index to get this elem out of the way, figure out what we're dragging over, then reset the z index\r\n        this.dragElem.style.zIndex = -1;\r\n        const target = document.elementFromPoint(x, y) || document.body;\r\n        this.dragElem.style.zIndex = this.props.zIndex;\r\n        // prevent it from selecting itself as the target\r\n        this.currentTarget = this.dragElem.contains(target) ? document.body : target;\r\n    };\r\n\r\n    setFixedOffset = () => {\r\n        if (isZoomed()) {\r\n            [this.fixedOffsetLeft, this.fixedOffsetTop] = getFixedOffset();\r\n        }\r\n    };\r\n\r\n    doScroll = () => {\r\n        window.scrollBy(this.xScroll, this.yScroll)\r\n        this.setFixedOffset();\r\n    };\r\n\r\n    startScrolling = (x, y) => {\r\n        [this.xScroll, this.yScroll] = [x, y];\r\n        if (!this.scrollTimer) {\r\n            this.scrollTimer = setInterval(this.doScroll, 50);\r\n        }\r\n    };\r\n\r\n    stopScrolling = () => {\r\n        clearInterval(this.scrollTimer);\r\n        this.scrollTimer = null;\r\n    };\r\n\r\n    generateEnterLeaveEvents = (x, y) => {\r\n        // generate events as we enter and leave elements while dragging\r\n        const prefix = this.props.targetKey;\r\n        this.setCurrentTarget(x, y);\r\n        if (this.currentTarget !== this.prevTarget) {\r\n            if (this.prevTarget) { this.prevTarget.dispatchEvent(this.buildCustomEvent(`${prefix}DragLeave`)); }\r\n            if (this.currentTarget) { this.currentTarget.dispatchEvent(this.buildCustomEvent(`${prefix}DragEnter`)); }\r\n        }\r\n        this.prevTarget = this.currentTarget;\r\n    };\r\n\r\n    generateDropEvent = (x, y) => {\r\n        // generate a drop event in whatever we're currently dragging over\r\n        this.setCurrentTarget(x, y);\r\n        const customEvent = this.buildCustomEvent(`${this.props.targetKey}Drop`, { x, y });\r\n        this.currentTarget.dispatchEvent(customEvent);\r\n    };\r\n\r\n    // Start the Drag\r\n    handleMouseDown = (e) => {\r\n        if (usesLeftButton(e) && !this.props.noDragging) {\r\n            document.addEventListener('mousemove', this.handleMouseMove);\r\n            document.addEventListener('mouseup', this.handleMouseUp);\r\n            this.startDrag(e.clientX, e.clientY);\r\n        }\r\n    };\r\n\r\n    handleTouchStart = (e) => {\r\n        if (!this.props.noDragging) {\r\n            e.stopPropagation();\r\n            this.setFixedOffset();\r\n            this.startDrag(e.targetTouches[0].clientX, e.targetTouches[0].clientY);\r\n        }\r\n    };\r\n\r\n    startDrag = (clickX, clickY) => {\r\n        document.addEventListener(`${this.props.targetKey}Dropped`, this.props.onDrop);\r\n        const rect = this.containerElem.getBoundingClientRect();\r\n        this.setState({\r\n            clicked: true,\r\n            leftOffset: rect.left - clickX,\r\n            topOffset: rect.top - clickY,\r\n            left: rect.left,\r\n            top: rect.top,\r\n        });\r\n        this.props.onDragStart(this.props.dragData);\r\n    };\r\n\r\n    // During Drag\r\n    handleMouseMove = (e) => {\r\n        if (!this.props.noDragging) {\r\n            e.preventDefault();\r\n            if (this.state.clicked) {\r\n                this.drag(e.clientX, e.clientY);\r\n                window.getSelection().removeAllRanges(); // prevent firefox native-drag issue when image is highlighted\r\n            }\r\n        }\r\n    };\r\n\r\n    handleTouchMove = (e) => {\r\n        if (!this.props.noDragging) {\r\n            e.preventDefault();  // prevents window scrolling\r\n            if (this.state.clicked) {\r\n                this.drag(e.targetTouches[0].clientX, e.targetTouches[0].clientY);\r\n            }\r\n        }\r\n    };\r\n\r\n    getOffscreenCoordinates = (x, y) => {\r\n        // are we offscreen (or very close, anyway)? if so by how much?\r\n        const LEFTEDGE = 10\r\n        const RIGHTEDGE = window.innerWidth - 10\r\n        const TOPEDGE = 10\r\n        const BOTTOMEDGE = window.innerHeight - 10\r\n        const xOff = x < LEFTEDGE ? x - LEFTEDGE : x > RIGHTEDGE ? x - RIGHTEDGE : 0;\r\n        const yOff = y < TOPEDGE ? y - TOPEDGE : y > BOTTOMEDGE ? y - BOTTOMEDGE : 0;\r\n        return yOff || xOff ? [xOff, yOff] : false;\r\n    };\r\n\r\n    drag = (x, y) => {\r\n        this.generateEnterLeaveEvents(x, y);\r\n        const stateChanges = { dragging: true };\r\n        const offScreen = this.getOffscreenCoordinates(x, y);\r\n        if (offScreen) {\r\n            this.startScrolling(...offScreen)\r\n        } else {\r\n            this.stopScrolling();\r\n            if (!this.props.yOnly) { stateChanges.left = (this.state.leftOffset + x) - this.fixedOffsetLeft; }\r\n            if (!this.props.xOnly) { stateChanges.top = (this.state.topOffset + y) - this.fixedOffsetTop; }\r\n        }\r\n        this.setState(stateChanges);\r\n        this.props.onDrag(this.props.dragData, this.currentTarget, x, y);\r\n    };\r\n\r\n    // Drop\r\n    handleMouseUp = (e) => {\r\n        this.setState({ clicked: false });\r\n        if (this.state.dragging) {\r\n            document.removeEventListener('mousemove', this.handleMouseMove);\r\n            document.removeEventListener('mouseup', this.handleMouseUp);\r\n            this.drop(e.clientX, e.clientY);\r\n            window.getSelection().removeAllRanges(); // prevent weird-looking highlights\r\n        }\r\n    };\r\n\r\n    handleTouchEnd = (e) => {\r\n        this.setState({ clicked: false });\r\n        if (this.state.dragging) {\r\n            this.drop(e.changedTouches[0].clientX, e.changedTouches[0].clientY);\r\n        }\r\n    };\r\n\r\n    drop = (x, y) => {\r\n        this.stopScrolling();\r\n        this.generateDropEvent(x, y);\r\n        document.removeEventListener(`${this.props.targetKey}Dropped`, this.props.onDrop);\r\n        this._isMounted && this.setState({ dragging: false });\r\n        this.props.onDragEnd(this.props.dragData, this.currentTarget, x, y);\r\n    };\r\n\r\n    getDisplayMode = () => {\r\n        if (this.state.dragging && !this.props.dragClone && !this.props.customDragElement) {\r\n            if (this.props.disappearDraggedElement) {\r\n                return 'disappeared'\r\n            }\r\n            return 'hidden'\r\n        }\r\n        return 'normal'\r\n    };\r\n\r\n    render() {\r\n        const content = this.props.render ? this.props.render(this.state) : this.props.children;\r\n        const displayMode = this.getDisplayMode();\r\n\r\n        // dragging will be applied to the \"ghost\" element\r\n        let ghostContent;\r\n        if (this.props.customDragElement) {\r\n            ghostContent = this.props.customDragElement;\r\n        } else {\r\n            ghostContent = content;   // dragging a clone\r\n        }\r\n\r\n        const ghostStyles = {\r\n            position: 'fixed',\r\n            cursor: 'move',\r\n            left: this.state.left,\r\n            top: this.state.top,\r\n            zIndex: this.props.zIndex,\r\n            opacity: this.props.dragElemOpacity,\r\n            display: this.state.dragging ? 'block' : 'none',\r\n        };\r\n\r\n        const ghost = (\r\n            <div className=\"ddcontainerghost\" style={ghostStyles} ref={(c) => { this.dragElem = c; }}>\r\n                {ghostContent}\r\n            </div>\r\n        );\r\n\r\n        const containerStyles = {\r\n            position: displayMode === 'disappeared' ? 'absolute' : 'relative',\r\n            display: 'inline-block',\r\n        };\r\n\r\n        const sourceElemStyles = {\r\n            display: displayMode === 'disappeared' ? 'none' : 'inherit',\r\n            visibility: displayMode === 'hidden' ? 'hidden' : 'inherit',\r\n        };\r\n\r\n        return (\r\n            <div className=\"ddcontainer\" style={containerStyles} ref={(c) => { this.containerElem = c; }}>\r\n                <span className=\"ddcontainersource\" style={sourceElemStyles} ref={(c) => { this.sourceElem = c; }}>\r\n                    {content}\r\n                </span>\r\n                {ghost}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDragDropContainer.propTypes = {\r\n    children: PropTypes.node,\r\n\r\n    // Determines what you can drop on\r\n    targetKey: PropTypes.string,\r\n\r\n    // If provided, we'll drag this instead of the actual object. Takes priority over dragClone if both are set\r\n    customDragElement: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n\r\n    // Makes the dragged element completely disappear while dragging so that it takes up no space\r\n    disappearDraggedElement: PropTypes.bool,\r\n\r\n    // If true, then we will drag a clone of the object instead of the object itself. See also customDragElement\r\n    dragClone: PropTypes.bool,\r\n\r\n    // ghost will display with this opacity\r\n    dragElemOpacity: PropTypes.number,\r\n\r\n    // We will pass this data to the target when you drag or drop over it\r\n    dragData: PropTypes.object,\r\n\r\n    // If included, we'll only let you drag by grabbing elements with this className\r\n    dragHandleClassName: PropTypes.string,\r\n\r\n    // if True, then dragging is turned off\r\n    noDragging: PropTypes.bool,\r\n\r\n    // callbacks (optional):\r\n    onDrop: PropTypes.func,\r\n    onDrag: PropTypes.func,\r\n    onDragEnd: PropTypes.func,\r\n    onDragStart: PropTypes.func,\r\n\r\n    // Enable a render prop\r\n    render: PropTypes.func,\r\n\r\n    // Constrain dragging to the x or y directions only\r\n    xOnly: PropTypes.bool,\r\n    yOnly: PropTypes.bool,\r\n\r\n    // Defaults to 1000 while dragging, but you can customize it if you need it to go higher\r\n    zIndex: PropTypes.number,\r\n};\r\n\r\nDragDropContainer.defaultProps = {\r\n    targetKey: 'ddc',\r\n    children: null,\r\n    customDragElement: null,\r\n    disappearDraggedElement: false,\r\n    dragClone: false,\r\n    dragElemOpacity: 0.9,\r\n    dragData: {},\r\n    dragHandleClassName: '',\r\n    onDragStart: () => { },\r\n    onDrag: () => { },\r\n    onDragEnd: () => { },\r\n    onDrop: () => { },\r\n    noDragging: false,\r\n    render: null,\r\n    xOnly: false,\r\n    yOnly: false,\r\n    zIndex: 1000,\r\n};\r\n\r\nexport default DragDropContainer;"]},"metadata":{},"sourceType":"module"}